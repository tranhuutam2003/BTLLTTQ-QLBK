@{
    Layout = "~/Views/Admin/AdminLayout.cshtml";
}

@model IEnumerable<TestWeb.Models.Revenue>

<h2>Daily Revenue</h2>

<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Total Revenue (VND)</th>
            <th>Total Orders</th>
            <th>Total Profit (VND)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var revenue in Model)
        {
            <tr>
                <td>@revenue.Date.ToString("dd/MM/yyyy")</td>
                <td>@revenue.TotalSales.ToString("N0")</td>
                <td>@revenue.TotalOrders</td>
                <td>@revenue.TotalProfit.ToString("N0")</td>
            </tr>
        }
    </tbody>
</table>

<h2>Revenue Charts</h2>

<!-- Daily revenue chart -->
<h3>Daily Revenue (This Month)</h3>
<canvas id="dailyRevenueChart" width="800" height="400"></canvas>

<!-- Monthly revenue chart -->
<h3>Monthly Revenue (This Year)</h3>
<canvas id="monthlyRevenueChart" width="800" height="400"></canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    async function loadDailyRevenue(month, year) {
        const response = await fetch(`/api/revenue/daily/${month}/${year}`);
        const data = await response.json();

        const labels = data.map(item => new Date(item.date).getDate());
        const values = data.map(item => item.totalSales);

        const ctx = document.getElementById('dailyRevenueChart').getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Daily Revenue',
                    data: values,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: true
                }]
            },
            options: {
                scales: {
                    x: { title: { display: true, text: 'Date' } },
                    y: {
                        title: { display: true, text: 'Revenue (VND)' },
                        ticks: {
                            callback: function (value) {
                                return value.toLocaleString('vi-VN'); // Format as currency
                            }
                        }
                    }
                }
            }
        });
    }

    async function loadMonthlyRevenue(year) {
        const response = await fetch(`/api/revenue/monthly/${year}`);
        const data = await response.json();

        const labels = data.map(item => `Month ${item.month}`);
        const values = data.map(item => item.totalSales);

        const ctx = document.getElementById('monthlyRevenueChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Monthly Revenue',
                    data: values,
                    backgroundColor: 'rgba(153, 102, 255, 0.6)',
                    borderColor: 'rgba(153, 102, 255, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    x: { title: { display: true, text: 'Month' } },
                    y: {
                        title: { display: true, text: 'Revenue (VND)' },
                        ticks: {
                            callback: function (value) {
                                return value.toLocaleString('vi-VN'); // Format as currency
                            }
                        }
                    }
                }
            }
        });
    }

    // Load initial data for the current month and year
    const today = new Date();
    loadDailyRevenue(today.getMonth() + 1, today.getFullYear());
    loadMonthlyRevenue(today.getFullYear());
</script>